entity fifo_ent is

Port (enr: in STD LOGIC:

enw :in STD LOGIC:

dataout: out STD LOGIC VECTOR (3 downto 0);

datain: in STD LOGIC VECTOR (3 downto 0);

empty: out STD LOGIC,

full :out STD LOGIC:

clk: in STD LOGIC);

end fifo_ent;

architecture Behavioral of fifo_ent is

type memory type is array(0 to 7) of std_logic_vector(3 downto 0); signal memory: memory type;

signal readptr writeptr : std_logic_vector(3 downto 0): "0000";

begin

process (clk)

begin if(clk event and clk = '1' and enw = '1') then memory (conv_integer (writeptr)) <= datain; writeptr<= writeptr = '1';
end if;

if (clk'event and clk ='1' and enr ='1') then
dataout <= memory (conv_integer (readptr));

end if;

readptr<= readptr + '1';

if (readptr "1000") then

else

empty<='1'; readptr<="0000";

end if;

empty<='0';

if (writeptr -"1000") then

full<='1';

writeptr<="0000";

full<='0';

else

end if; end process;

end Behavioral;



TEST BENCH


begin

enw<='1'; datain<-"1110"; wait for 10 ns; datain<="1100"; wait for 10 ns; datain<="1000"; wait for 10 ns; datain<= "0000"; wait for 10 ns; datain<="1111"; wait for 10 ns; datain<="0100"; wait for 10 ns; datain<="0110"; wait for 10 s; datain<="0011"; enw<='0';

wait for 10 ns;

enr<='1';
